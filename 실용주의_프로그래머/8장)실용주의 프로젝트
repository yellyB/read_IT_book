Page	김보미
351	실용주의 프로젝트
352	
353	이제까지 나온 실용주의 기법들은 팀에도 적용됨  - 팀 전체가 깨진 창문 경계하라
354	삶은개구리-팀 전체가 환경 변화 감시 / 소통-프로젝트에 이름 지어주면 팀이 하나로 뭉치는데 도움됨
355	반복하지마라- 한사람이 맡기 넘 큰 일은 나눠서 맡기
356	직교성- 프로젝트의 여러 활동은 독립적으로 이뤄지기 불가능. 
357	    기능 중심으로 팀을 조직하자 >변화가 생기더라도 전체가 영향 받지 않음
358	팀에는 관리자 두명 필요:기술수석(개발철학&팀에 책임할당,토론중재,직교성), 관리수석(자원계획&진척도)
359	자동화- 정확성 보장  . 각 팀원이 자신의 방식대로 빛나게 해주어라!(간섭 적당히)
360	
361	프로젝트에 일관성과 반복가능성을 확보하고 싶다 -> 자동화
362	IDE똑같은거 사용하는 회사-사람마다 다르게 설치함>개발환경이 다 달라짐 >>자동화필요
363	프로젝트 컴파일 자동화:보통makefile로 컴파일함. IDE만으론 자동화 어렵
364	코드 생성-다른 소스에서 자동으로 파일 생성하도록 makefile에 규칙 추가(회귀테스트도 가능)
365	빌드 자동화-매일 실행하면서 모든 테스트 거치도록. 이걸 만약 3개월마다 한다면 언제 문제 터진지 알기 어렵
366	자동화된 관리 - 기억력 넘 믿지 말라. 자동 처리 스크립트 ㄱㄱ
367	팀 소통 위한 웹사이트 - 유지보수에 너무 공들여도, 넘 낡아도 안됨. 빌드결과,회귀테스트, 등등 볼수 있어야
368	승인과정 - 코드와 섥계 검토 일정 잡고 지키기, 승인 받기>웹사이트에서. (git full request같은)
369	일할 때 반복되는 작업 있으면 그거 자동화하는 셸 스크립트or아이콘클릭은 매크로
370	
371	일찍, 자주, 자동 테스트하라
372	훌륭한 프로젝트는 테스트코드가 더 많을지도 모른다.  테스트 중요! 테스트가 끝나야 모두 끝
373	무엇을 테스트? 단위 테스트 - 하나의 모듈을 테스트. 부분이 동작하지 않으면 전체도 안됨
374	통합테스트-주요서브시스템이 다른 부분과 작동하는지. /유효성평가와검증-버그가 없어도 요구사항을 충족하는지?
375	자원고갈, 에러&복구 - 메모리, 디스크공간, CPU 등등 / 성능 테스트 - 초당 사용자, 접속, 트랜잭션 숫자 
376	사용편의성 - 실제 사용자들이 시행. 사용자들이 사용하기에 편한가
377	설계/방법론 테스트 - 코드설계 자체와 솦웨어 만드는데 사용한 방법론 모두 테스트 가능: 메트릭분석(ex코드 줄 수)
378	어떻게 테스트? 회귀테스트-이전값과현재 출력을 비교.  테스트데이터-실세계데이터랑 합성데이터(인공적)있음
379	GUI시스템 테스트-GUI가 표시되지 않은 상태에서도 테스트 할 수 있을만큼 결합도 낮게 설계해야함
380	테스트를 테스트 - ex)버그에 알람울리는 시스템에서 버그 감지 테스트작성하고 시스템이 걔를 잡아내는지 봐라
381	철저한 테스트 - 아무리 테스트를해도 철저히 테스트했다고 확신불가. (코드커버리지-어느 라인이 실행 안됐는지)
382	언제 테스트? 테스트 미루면ㄴㄴ 코드 나오자마자 테스트ㄱㄱ . 테스트랑 그 결과해석 둘다 자동화 필요
383	버그 발생하면 다음엔 그 버그 절대 안나올거같더라도 걔 테스트 할 수 있도록 하자
384	
385	문서화 중요. 기억력 믿지 마
386	내부문서/외부문서 두 종류있음. 문서가 전체의 일부가 되게하라. 나중에 집어넣으려 하지마라
387	주석은 목적을 논해야함. 변수 이름 잘 짓자.줄여쓰기 ㄴㄴ해
388	주석에 넣지 말것: export함수 목록, 리비전기록-얜 소스관리맡겨, 파일목록, 파일 이름  ->긍까 자동화하란얘기
389	명세 문서를 소스로 선택해보자(DB명세랑 테이블생성 sql 파일 생각하면됨)
390	문서가 일반 텍스트 아니라면? 매크로 or 문서를 다른 도구로 불러와서 사용
391	테크니컬 라이터에게 문서 작성 맡기더라도 이 사람들이 우리들의 원칙을 지켜야함
392	문서를 종이로 관리 ㄴ 웹 문서로 관리 ㅇ
393	규모가 큰 프젝이면 마크업 체계 권장함(DocBook). 문서도 코드만큼 관심주세요 !
394	
395	명세를 구현했다고 끝이 아니라 사용자들의 기대를 충족해야함
396	기대관리-사용자들이 무슨 결과를 받게 될지에 대해 계속 소통
397	사용자들을 놀래켜주려고 노력해야함. 기대보다 조금만 더 해주면 굿(툴팁,단축키,색깔,회사 맞춤 대시보드,...)
398	근데 이런거 추가하느라 시스템 망가뜨림 안됨
399	작품에 서명하라-책임 회피하지 않기
400	익명성은 프로젝트의 적. 코드에 주인 있어야. 서명이 품질의 보증수표로인식->진정한 프로페셔널
