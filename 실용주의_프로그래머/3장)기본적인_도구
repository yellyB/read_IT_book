Page	김보미
129	자기에게 맞는 도구 필요
130	맨날 쓰는 익숙한 도구만 쓰는건 실수
131	도구를 자신의 손 처럼 쓸 수 있도록 익숙하게 만들자
132	일반 텍스트 : 사람이 직접 읽고 이해할 수 있는 형태의 문자 ex)XML, SGML, HTML + YAML
133	지식을 일반 텍스트로 저장하라
134	 단점:더 많은 저장공간차지, 일반텍스트를 해석&처리하는데 더 많은 계산 필요
135	일반 텍스트 장점 1) 옛 방식의 데이터로 저장하면 나중에 보기 힘들 수 있음. 이걸 막아줌
136	장점2) 호환성
137	장점3) 특별한 도구 없어도 되어서 테스트 쉬움 테스트 쉬움
138	일반 텍스트는 '표준'으로 가장 적절
139	GUI 장점 - what you see is what you get / 단점 - what you see is all you get
140	셸은 여러분의 칭구칭구
141	셸 명령어 어려워 보이긴 하지만 강력함
142	명령어 셸의 힘을 사용하라
143	윈도우 명령줄 유틸리티들은 유닉스에 비해 열악
144	
145	에디터에 능숙해질 필요가 있다.
146	에디터의 기능 : 설정변경 - 폰트, 색깔, ... / 확장기능 - 새로운 언어 나왔을때 사용 가능해야함 / 프로그램 가능
147	  + 구문 강조, 자동완성, 들여쓰기, ....   -> 생산성 높일 수 있다.
148	에디터를 써야 생산성 올라감!
149	자동 들여쓰기 생산성 높이는데 도움
150	에디터 추천 : Emacs  Vim elvis
151	
152	소스코드 관리  소스관리 시스템은 소스를 undo할 수 있는것보다 더 많은 일을 함
153	소스코드 관리의 중요성
154	혼자서 한주짜리 프로젝트든 나중에 버릴 프로토타입이든 모든 것이 소스코드 관리 아래 있도록 하라
155	소스코드 관리 추천 : RCS , CVS , Aegis, clearCase, MKS Source Integrity, PVCS, Sourcesafe, Perfoce
156	
157	디버깅 
158	비난 대신 문제를 해결하라 . 버그가 누구의 잘못인지 별로 안중요. 그 버그는 당신의 문제임
159	디버깅 할 때 당황하지 마라. 표면에 보이는 증상만 고치려고 하지 말라
160	버그 보고는 정확하지 않음. 내가 직접 버그가 뭔지 확인하자
161	버그를 재현하는 것도 중요 . / 
162	디버깅 전략 : 데이터 가시화 하라
163	  트레이싱 - 코드 깊숙히 파고 들기 위해 필요
164	  고무오리-남에게 설명하다가 문제를 발견하기도 함(막히는게 있다면 자기자신에게 설명하자)
165	  제거과정 - 외부 문제보다 자신의 실수일 가능성이 높음
166	버그가 발생했다면 내가 세운 가정이 잘못되었다는걸 깨닫자. 가정하지 마라 증명하라
167	버그를 고치는걸 넘어서 왜 일찍 발견하지 못했는지 생각해보자. 예방하자
168	
169	텍스트 처리
170	텍스트 처리 언어 하나 익혀라
171	데이터베이스 스키마 관리, 자바 속성 액세스, 테스트 데이터 생성, 서적 집필, 
172	 C에서 오브젝트 파스칼 인터페이스로, 웹 문서 생성
173	
174	
175	코드 생성기 코드를 작성하는 코드를 작성하라  - 복잡성 없앰, 실수 줄임, 품질에만 집중가능
176	수동적 코드 생성기 - 템플릿임. 용도: 새 소스 파일 생성, 프로그래밍 언어간 일회용 변환수행, 런타임에 계산하기엔 비용이 많이 드는 참조 테이블과 여타 자원을 생성하기
177	능동적 코드 생성기 - 수동적~~은 편하려고 사용, 능동적~~는 DRY원칙 지키고싶다면 필수. 
178	필요할 때마다 코드 생성기가 만들어내기때문에 중복이 아니다. (별개의 두개 환경을 오가며 작업한다면 능동적~~ 고려해보자)
179	모든 코드 기반이 공통으로 가져야 하는 정보가 있다면 코드 생성기 사용하자
180	코드 생성기 꼭 복잡할 필요 없음, 코드 생성기가 꼭 코드를 생성할 필요 없음
