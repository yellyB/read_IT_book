Page	김보미
317	프로젝트 전에 - 요구사항 결정할때 사용자 얘기 잘 듣는것만으로는 부족함,
318	  ,머리속 경고를 언제 경청할 지, 명세의 장점, 형식적 개발 프로세스와 방법론 위험성 => 얘네 다룰거임
319	요구사항의 구렁텅이 - 요구사항을 수집x 채굴o  -널부러진 요구사항 줍고 행복해하지말고
320	채굴하기: 요구사항은 최대한 일반적 진술로 만들라. 요구사항 잘 수집하기
321	어떻게 하느냐는것보다 왜 그런지 이유를 아는것이 중요. 사용자가 되어보기
322	요구사항 문서화
323	때로는 인터페이스가 시스템 - 친숙한 메타포를 통해 새 시스템으로 전환 쉽도록
324	
325	
326	유스 케이스 다이어그램 - 표기법의 노예가 되지 말라
327	지나치게 자세한 명세 - 좋은 요구사항 문서는 추상적. 모호하게 하란 말은 x
328	더 멀리 보기 - (ex Y2K문제 두자리 숫자가 년도 줄여쓴것이라는 추상화 필요했음)
329	요구사항이 점점 추가되면? 요구사항을 추적해서 이력관리, 기능추가되면 일정 늘어남 공지
330	프로젝트 용어 사전 필:일관성 유지(ex 커스터머, 클라 - 두개를 다르게 사용하는 사람도 있음)
331	요구사항은 웹기반으로 하자(종이 ㄴㄴ)
332	
333	불가능한 퍼즐 풀기  -고르디우스의 매듭(요구사항의 다른 해석)
334	자유의 정도 - '생각의 틀을 벗어나라'라는 말 있는데 그 틀을 아는것 중요
335	안풀리는 문제가 있다면 생각해보기 :
336	  더 쉬운 방법 있? 혹 안중요한 기술적문제랑 씨름중? 왜 이게 문제? 머땜시 어려워짐? 꼭 이방법? 꼭 해야?
337	
338	언제가 최적의 타이밍인지 알아야함
339	좋은판단이냐 늑장이냐 어케 판단? -> 프로토타이핑 시작해보자
340	시작했는데 지루함? 늑장이었음-> 진짜 개발 ㄱㄱ / 하다가 깨달음이 왔다 -> 진짜 개발 ㄱㄱ
341	명세의 함정 - 세부사항을 넘 자세히 쓰는건 ㄴㄴ임
342	 ㄴ 이유: 세부사항 다 잡아낼순 없음-사람마다 해석 차이나서 어챂 문제생김 / 언어 표현능력 한계가 있음
343	                구속복 효과 - 코딩러의 모든 수완과 기술 빼앗아버림(자율성 없단뜻)
344	명세를 쓰는건 쉽다. 작성기간 길어질수록 코드 작성 힘들어짐
345	어떨땐 한장 그림이 글보다 나을때 있음 - 과잉명세 하고 있는게 아닌지 경계하자
346	형식적 방법의 노예가 되지 마라 - 맹목적으로 받아들이지 말란 뜻
347	형식적방법 단점: 어차피 설계자의 설명이 필요해서 의미가 없음/ 전문화 권장 같음:설계자-코딩러가 우리-저들 하고 생각할 수 있음
348	새로운 도구와 방법론 채택하는데 비용 만만치않음
349	비싼 도구가 더 좋은 설계를 낳지 않음 - 형식적 방법은 도구일뿐이다.
