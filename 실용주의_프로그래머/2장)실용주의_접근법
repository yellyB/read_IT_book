Page	김보미
63	실용주의 접근법 - 1가역성(Reversibility):변화속에서 application 적절하게 유지
64	2예광탄(Tracer Bullets) :요구사항 모음,설계테스트, 코드 구현 들을 동시에 가능케함
65	중복의 해악 유지보수는 애플리케이션이 출시되고나서 시작되는거 아님. 평소에도 계속
66	DRY(Dont Repeat Yourself) : 모든 지식은 시스템 내에서 단일해야한다
67	중복이 생기는 이유 : 강요된, 부주의한, 참을성없는, 개발자간   // 1.강요된 중복 : 개발자의 선택이 아닌 환경으로 인한 중복
68	이런 상황에서 DRY원칙을 따를 수 있는 기법: a)정보의 다양한 표현양식-ex코드생성기
69	b)코드내의 문서화-주석을 잘 관리하자 c)문서화와 코드-코드가 수정되면 문서가 자동갱신되도록 하는 방법있음
70	2.언어에 관한 문제 : 헤더파일-인터페이스 대한것.구현파일-코드사용자가 알필요없는것 .으로 구분하자
71	3. 부주의한 중복 : 설계실수로 나타남.
72	   ex.start,end,length가 있을 때 length는 start와 end의 계산값으로 설계하면됨
73	4.참을 수 없는 중복 - 개발자가 게을러서 쉬운 길 선택하다 일어남. 나중에 고통스러우니 미리 고치자
74	5. 개발자간 중복: 개발자간에 적극적, 빈번한 소통하기, 재사용 쉽게 만들라
75	재사용하기 쉽게해서 직접 만들기보다 기존의 것을 찾아내어 재사용하는 환경 필요
76	직교성(Orthogonality) 하나가 바뀌어도 나머지에 영향 주지 않으면 서로 직교 (독립성, 결합도줄이기 decoupling)
77	직교성의 장점 :비직교적 시스템은 변화하기 복잡함
78	장점1. 생산성 향상:변화가 localize되어 개발시간과 테스트시간 줄어듦, 재사용촉진, 생산성 향상
79	장점2. 리스크 감소 : 감염코드 격리된다, 수정해서 생기는 문제는 그 부분에만 한정됨, 테스트실행이 쉬워서 더 많은 테스트, 다른 부분에 덜 종속
80	직교성 원칙 적용방법1  프로젝트팀:팀원 간 업무 직교성 가지기. 인프라 분리 방식
81	방법2 설계 :레이어식 접근으로 설계하기(=모듈라, =컴포넌트 기반)
82	방법3 툴킷과 라이브러리:서드파티나 라이브러리 도입할 때 시스템의 직교성 보존 할 수 있을지 잘 보자
83	좋은예)엔터프라이즈 자바빈즈 시스템
84	방법4 코딩 :코드의 결합도 줄이기-shy code작성/
85	global데이터 피하라-singleton pattern 사용시 주의하라/유사한 함수 피하라
86	방법5 테스트 :직교적시스템은 테스트 쉽. 모듈수준 테스트 가능. 단위테스트
87	방법6문서화 :내용과 표현 두 개로 나눠 작성
88	방법7 직교적으로 살아가기
89	modeless랑 modal 대화상자 중 전자가 직교적
90	가역성 무언가 구현하는 방법은 여러가지임.
91	소프트웨어를 개발하는 속도는 변화를 앞지를 수 없음
92	결정할 때 유연성을 가져야 함
93	유연한 아키텍처 - 하나의 제한된 결정만을 수행하는 프로그램을 작성하지 말라
94	아니 고양이 왜죽이노 슈뢰딩거의 슈뢰딩거
95	코드를 슈뢰딩거의 슈뢰딩거 상자로 생각하라.
96	예광탄 어떤 일을 계산해서 예측하는것보다 리허설 하는게 더 편함
97	코딩에서 예광탄 효과를 볼 수 있는 무언가를 찾아햐 함. 목표물을 찾기 위해 예광탄을 써라
98	예광탄 코드는 일회용 아님. 완전한 기능이 들어있지 않을 뿐 계속 사용
99	예광탄 접근법 장점 : 사용자들이 뭔가 작동되는것을 일찍 볼수있음/ 개발자들이  무에서 유를 창조해내지 않아도됨
100	/진전 상황에 대해 감 잡기 쉬움
101	예광탄이 언제나 목표물을 맞추진 않음. but 목표까지의 감이 생김
102	프로토타입과는 다름, 프로토: 나중에 버릴코드/예광탄:기능은 없으나 완결코드, 골격
103	
104	프로토타입과 포스트잇 코드로만x 그려서도가능
105	프로토타입을 통해 조사할 대상 : 위험을 수반하는 것, 이전에 해본적 없는것, 최종 시스템에 중요한 것 등
106	프로토타입=학습경험
107	프로토타입 무시해도 되는 : 정확성(가짜데이터ㄱㄴ)/완전성/안정성/스타일(주석,문서 중요x)
108	프로토타입은 버릴 코드라서 모든 사람에게 이걸 폐기처분할 거란거 알리자
109	그게 아니라면 예광탄 접근 방식으로 가자
110	도메인 언어 언어의 한계가 곧 자기 세계의 한계다.
111	문제 도메인에 가깝게 프로그래밍하라
112	소형 언어를 구현하기 - 파싱하기 쉬운 라인중심 형식 언어로 만드는 것이 간단함
113	
114	데이터 언어-애플리케이션이 사용할 어떤 형식의 데이터 구조를 만든다.
115	
116	프로그램 유지보수 쉽게하기 위해 스스로 명령형 언어 만들어 사용할 수 있음
117	독립 언어와 내장 언어 - 직접 사용되어야만 유용한건 아님. 프로그램 자체가 사용하기 위한 명세 언어를 사용하기도 함
118	현재의 고통을 참고 복잡하지만 가독성 좋은 언어를 채택하는것이 좋음
119	
120	추정 추정을 통해 놀람을 피하라
121	얼마나 정확해야지 충분히 정확한 것인가?
122	추정을 할 때 단위도 신경쓰기.  다른사람의 경험을 통해 추정하자
123	질문의 의도를 파악해 추정하기/ 시스템의 모델을 만들어보라
124	모델을 컴포넌트로 나누어라/  각 매개 변수에 값을 주어라
125	답을 계산하라 / 추정치를 기록하는 용기(실패는 성공의 어머니)
126	프로젝트 일정 추정하기 - 단계로 진행하면서 추정의 정확성 높이자
127	코드와 함계 일정도 반복하며 조정하라
