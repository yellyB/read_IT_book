Page	김보미
271	코딩하는 동안 어떤 자세를 가져야 할까
272	우연에 맡기는 프로그래밍 하지 말라
273	의도적으로 프로그래밍 해야한다.
274	코드가 잘 돌아가도 왜 잘돌아가는지 모른다면 잘 안돌아갈때 이유를 모르게된다.
275	내가 틀리게 짰으면 잘 돌아가는거처럼 보여도 그냥 넘어가면 안됨
276	의도적으로 프로그래밍하기
277	 내가 뭘하고 있는지 알기, 계획충이 되기, 가장 최악의 상황 가정하기, 문서화, 가정만하지말고 실제 해보기,
278	 중요한것에 시간 투자하기, 적절한코드가 아니라고 생각하면 바로 교체
279	
280	
281	알고리즘의 속도
282	O()표기법
283	겹친반복문 - O(n²) / 반씩 잘라내기 - 돌때마다 작업 대상의 수를 반으로 줄여나가는 =대수적알고리즘 O(lg(n))
284	  /  나눠서 정복하기 - 반쪽으로 나눠서 독립작업후 합침 O(nlg(n))
285	 / combinatoric - 순열은 factorial관련되서 수행시간 개늘어남 - 줄이기 위해 휴리스틱 동원되기도
286	알고리즘의 차수를 추정하라 (수행시간, 메모리)
287	그 추정을 테스트하라 - 실행했을때 내 예상과 다를수도
288	최고라고 언제나 최고는 아니다 - 가장 빠른 알고리즘이 언제나 가장 좋은 알고리즘은 아님
289	 ㄴ 규모가작다면 삽입정렬=퀵정렬 비슷. but 삽입정렬이 디버깅시간 더 짧.
290	
291	리팩터링 - 소프트웨어는 건축보다는 정원일
292	어떤것이든 잘못되었다고 생각했다면 바로 변경해야함(중복, 직교성좋지않음,유효기간끝난지식, 성능)
293	현실세계에서 리팩터링 설명 : 종양
294	리팩터링 명단 관리하라, 일정에 리팩터링 포함시켜라, 사람들에게 리팩터링 계획 인지시켜라
295	효율적 리팩터링 조언 : 1 리팩터링과 새 기능 동시에 하지x
296	  2 테스트 할 사람 있나 확인  3 단계를 작게 나눠 작업. 한단계 끝날때마다 테스트
297	깨진창문 그대로 두지 마라!
298	
299	
300	단위 테스트 - [계약에 의한 설계] 개념들 사용해서 테스트 하면 좋음
301	계약을 잘 지키는지 테스트 - 1 코드가 계약을 지키나   2 코드로 표현된 계약의 의미가 우리생각이랑 같나
302	하위 컴포넌트 먼저 테스트
303	 ex) l과 s를 사용하는 A라는 모듈이 있다면: l을 완전 테스트, S를 완전 테스트, A를 테스트
304	단위테스트 작성하기 - 소스는 찾기 편한곳에 위치해야
305	 ㄴ 왜? 모듈의 모든 기능을 어떻게 이용할지 보여주는 예제,  코드 변경시 검증하는 수단
306	테스트 장치를 사용하기
307	테스트장치라면 갖춰야할:
308	    setup과 cleanup을 지정가능, 개별&모든 테스트, 예상과 비교해 결과 분석, 실패보고하는 표준 형태
309	디버깅하면서 만든 테스트(임시변통 테스트)는 버리지말고 다음에 또 잘못될 수 있으니 테스트를 저장해두자
310	테스트 윈도우 만들기 - 형식이 일관성 있어야 결과를 읽기 쉽다.
311	테스트 문화 - 님이 안하면 사용자들이 테스트하게됨. 테스트 철저히.
312	
313	UI복잡해져감-개발자들 할거 넘 많 - 그래서 마법사 기능이 나옴 얘네는 다 해줍니다
314	근데 마법사 코드를 내가 이해하지 못한다면 사용하지 말라
315	
