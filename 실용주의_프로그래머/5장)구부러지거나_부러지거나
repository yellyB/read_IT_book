Page	김보미
225	결합도 줄이기 - 유연성, 적응성 잃지 않을 수 있음
226	유연함 유지하기 - 가능한 적은 코드
227	코드를 모듈로 구성하고 상호작용 제한하라
228	결합도 줄이기
229	왜 의존도 증가가 나쁜가? 시스템 어딘가의 변화가 코드에 영향 끼칠 위험성 있음
230	디미터 법칙 - 모듈간 결합도 최소화
231	디미터 법칙은 객체의 모든 메서드는 다음에 해당하는 메서드만 호출해야 한다고 말한다.
232	DB설계시 반정규화를 통해 속도라는 이점을 얻는 전략도 있긴 함. 그거 적용하고 싶음 잘 써야함
233	
234	
235	메타 프로그래밍  - 세부사항 벗어나기 -> 유연성
236	여기서 메타데이터는 애플리케이션 기술하는 모든 데이터 말함. application이 어떻게 실행?, 어떤 자원 이용?... =>메타데이터
237	메.데 주도 application : 이점: 결합도 줄여 적응성, 추상적 디자인 가능,  등등  어쨌든 좋다는 내용
238	매개 변수 바꿨다고 재부팅하는 OS 불편하지 않음? 그러니까 프로그램이 실행 중에도 설정 정보 리로딩 되게 만들면 좋음. 하지만 복잡하다는 단점
239	엔터프라이즈 자바빈즈 EJB 같은 분산 시스템은 ...사용하면 어쨌든 좋다는 내용
240	협동적 설정 - application이 서로 설정하게 만든다면? 그때그때 맞게 설정되는 시스템이 있다면?
241	메타데이터를 사용하지 않으면 적응력이 떨어짐. 이러지 말자
242	시간적 결합
243	활동 다이어그램(UML)표기법을 사용해 작업 흐름 기술
244	작업흐름을 분석해서 동시에 수행될 수 있지만 그렇지 않은 작업을 찾아내 효율 올릴 수 있음
245	피나콜라다 만들기 - 동시에 할 수 있는건 동시에 하면 됨
246	아키텍처
247	배고픈 소비자 모델 - 여러 개의 소비자 작업이 큐 하나씩 가져가서 처리. 하나가 버벅대도 다른 작업들 문제없음
248	
249	동시성을 고려한 설계 - 자바의 다중 쓰레드는 제약 몇가지가 있는데 이 덕분에 코드 간 결합 끊기 가능
250	인터페이스 - 동시성과 시간 순서에 따른 의존성을 고려하는 것은 더 깔끔한 인터페이스 설계에 도움
251	동시성 고려해서 설계하자
252	시스템을 독립적인 서비스로 구성하면 설정도 동적으로 만들기 가능
253	동시성은 확장 가능성, 요구사항에 유연하게 대처 가능 & 깔끔한 설계 가능
254	모듈의 좋은 정의 : 잘 정의된 단 하나의 책임만 가지는 것
255	출판-구독 매커니즘처럼 출판자가 이벤트 발생시키면 구독자한테 그때 이벤트 일어났다고 알리면 됨
256	데이터 - 뷰 분리하면 좋음
257	MVC패턴 - 적은 비용으로 큰 유연성 = 가역성
258	자바 트리 위젯에서MVC좋은 예 있음
259	모델:추상 데이터 모델 / 뷰:모델 해석 방법 / 컨트롤러:뷰를 제어, 모델에 새 데이터 제공, 둘 다에 이벤트 보냄
260	
261	
262	
263	칠판 시스템 - 형사 여러명이 칠판에 각자 
264	
265	JavaSpace나 T Spaces 는 칠판 유형시스템. 키/값 쌍의 모델에 기반 두고 있음
266	칠판 방식은 인터페이스 하나만 있음 돼서 편리함. 일관성있는 프로그램도 가능함
267	
268	요소들의 독립성을 유지하는 동시에 이질적인 사실과 행위자들을 잘 조정하는데 칠판을 사용할 수 있다.
